server:
  port: 8080
spring:
  application:
    name: "gateway"
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: clientes-service
          uri: lb://clientes-service
          predicates:
            - Path=/api/clientes/**
          filters:
            - RewritePath=/api/clientes/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: clientesCircuitBreaker
                fallbackUri: forward:/fallback/clientes
        
        - id: creditos-service
          uri: lb://creditos-service
          predicates:
            - Path=/api/creditos/**
          filters:
            - RewritePath=/api/creditos/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: creditosCircuitBreaker
                fallbackUri: forward:/fallback/creditos
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AWS_ISSUER_URI:https://cognito-idp.REGION.amazonaws.com/POOL_ID}
          client-id: ${AWS_CLIENT_ID:your-client-id}

# En AWS, se deshabilita Eureka y se usa discovery por DNS o por otros medios de AWS
eureka:
  client:
    enabled: false

management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true

jwt:
  json-exp-roles: "/roles"

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
